# Source of network map. Supported:
# - Demo network maps:
#   - urn:demo:SquareDemoReader - initial square shaped example
#   - urn:demo:StarDemoReader   - more sophisticated shape but still easy to reason
# - GeoJson based:
#   - urn:classpath:FILE_NAME   - read GEO JSON file from application classpath (a.k.a resources)
#   - urn:file:FILE_NAME        - read GEO JSON file from absolute
#   IMPORTANT:
#     file name/file path string must be compatible with URN specification. All reserved signs have to
#     be escaped. E.g. 'lc-track0-21781.geojson' => 'lc-track0-21781%2Egeojson'
#   Precision model - precision=MODEL[,n]
#     Additionally we can define network geometry precision model using precision query parameter.
#     Supported models (for details check JTS precision model):
#       - FLOATING
#       - FIXED,n - where n is a number of decimal places
#     I aded those when researching precision issues when finding edge for vehicle location.
#   Distance error margin - precision=double_value
#     Margin of error (must be positive) when calculating geometries relations. This is strictly related
#     to precision model. And actually in this application to VehicleService precision.
#app.network-map.source = "urn:demo:SquareDemoReader"
#app.network-map.source = "urn:demo:StarDemoReader"
app.network-map.source = "urn:classpath:lc-track0-21781%2Egeojson?=precision=FIXED,2&distanceErrorMargin=0.02"
#app.network-map.source = "urn:file:/absolute/path/to/file%2Egeojson"

# Number of simulated vehicles
app.vehicle-service.vehicles = 3

# Application server settings
app.server.host = "localhost"
app.server.port = 8080